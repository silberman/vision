

may want to use:
expect for testing
deep-freeze for testing immutability of reducers
immutable.js

*****************************

3 principles:
1) Single source of truth
   The state of your whole application is stored in an object tree within a single store.

2) State is read-only
The only way to mutate the state is to emit an action, an object describing what happened.

3) Changes are made with pure functions
To specify how the state tree is transformed by actions, you write pure reducers.

*****************************

// way to maintain immutability of state change,
// with Object.assign
// todo is a state object with id, text, completed
const toggleTodo = (todo) => {
    return Object.assign({}, todo, {
        completed: !todo.completed
    });
}


// Create a Redux store holding the state of your app.
// Its API is { subscribe, dispatch, getState }.
let store = createStore(counter)

import { createStore } from 'redux'

/**
 * This is a reducer, a pure function with (state, action) => state signature.
 * It describes how an action transforms the state into the next state.
 *
 * The shape of the state is up to you: it can be a primitive, an array, an object,
 * or even an Immutable.js data structure. The only important part is that you should
 * not mutate the state object, but return a new object if the state changes.
 *
 * In this example, we use a `switch` statement and strings, but you can use a helper that
 * follows a different convention (such as function maps) if it makes sense for your project.
 */
function counter(state = 0, action) {
  switch (action.type) {
  case 'INCREMENT':
    return state + 1
  case 'DECREMENT':
    return state - 1
  default:
    return state
  }
}

// Create a Redux store holding the state of your app.
// Its API is { subscribe, dispatch, getState }.
let store = createStore(counter)

// You can subscribe to the updates manually, or use bindings to your view layer.
store.subscribe(() =>
  console.log(store.getState())
)

// The only way to mutate the internal state is to dispatch an action.
// The actions can be serialized, logged or stored and later replayed.
store.dispatch({ type: 'INCREMENT' })
// 1
store.dispatch({ type: 'INCREMENT' })
// 2
store.dispatch({ type: 'DECREMENT' })
// 1
